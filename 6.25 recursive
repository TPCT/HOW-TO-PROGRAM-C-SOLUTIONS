#include <stdio.h>
#include <time.h>
#define startPointX 4
#define startPointY 0
#define BoardWidth  8
#define BoardHeight 8

char Board[BoardHeight][BoardWidth] = {0};
char KnightMoves[8][2] = {{2,   1},
                          {2,  -1},
                          {-2,  1},
                          {-2, -1},
                          {1,   2},
                          {-1,  2},
                          {1,  -2},
                          {-1, -2}};
static inline char validMove(int x, int y){
  if (x >= 0 && x < 8 && y >= 0 && y < 8)
    return 1;
  return 0;
}

void PrintBoard(void){
  printf("     ");
  for(int i = 0; i < BoardWidth - 1; i++)
    printf("%-2d ", i);
  printf("%-2d\n", BoardWidth - 1);
  printf("  ");
  for(int i = 0; i < BoardWidth*3+1; i++)
    printf("-");
  printf("\n");
  for(int i = 0; i < BoardHeight; i++){
    printf("%-2d| ", i);
    for(int j = 0; j < BoardWidth-1; j++){
      printf("%-2d ", Board[i][j]);
    }
    printf("%-2d\n", Board[i][BoardWidth-1]);
  }
}

void KnightsTourRecursive(int x, int y){
  static char filledPoints = 1;
  char Movement[1][2] = {x, y};
  for(int i = 0; i < 8; i++){
    Movement[0][0] = x + KnightMoves[i][0];
    Movement[0][1] = y + KnightMoves[i][1];
    if (validMove(Movement[0][0], Movement[0][1]) && !Board[Movement[0][1]][Movement[0][0]]){
      Board[Movement[0][1]][Movement[0][0]] = filledPoints++;
      printf("Moving From Point(%d, %d) to (%d, %d)\n", x, y, Movement[0][0], Movement[0][1]);
      KnightsTourRecursive(Movement[0][0], Movement[0][1]);
    }
  }
}

int main(void){
  KnightsTourIterative(startPointX, startPointY);
  PrintBoard();
  return 0;
}
