#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct node* nodePtr;
typedef struct node{
  int value;
  nodePtr nextNode;
} listNode;

nodePtr insertNode(nodePtr *node, int value);
void concatLists(nodePtr *firstList, nodePtr *secondList);
void printLinkedList(nodePtr node);
void freeLinkedList(nodePtr node);

int main(void){
  nodePtr firstList = NULL;
  nodePtr secondList = NULL;
  srand(time(NULL));
  for (int i = 0; i < 10; i++){
    insertNode(&firstList, rand());
    insertNode(&secondList, rand());
  }
  concatLists(&firstList, &secondList);
  printLinkedList(firstList);
  freeLinkedList(firstList);
}

void concatLists(nodePtr *firstList, nodePtr *secondList){
  if(firstList == NULL || secondList == NULL || *secondList == NULL)
    return;
  if (*firstList == NULL)
    *firstList = *secondList;
  nodePtr tempPtr = *firstList;
  while(tempPtr->nextNode)
    tempPtr = tempPtr->nextNode;
  tempPtr->nextNode = *secondList;
}

nodePtr insertNode(nodePtr *node, int value){
  if (node == NULL)
    return NULL;
  if(*node == NULL){
    *node = (nodePtr) malloc(sizeof(node));
    if(*node == NULL){
      printf("%s\n", "There's no free memory to be allocated");
      return NULL;
    }else{
        (*node)->value = value;
        (*node)->nextNode = NULL;
        return (*node);
    }
  }else{
    (*node)->nextNode = insertNode(&(*node)->nextNode, value);
  }
  return (*node);
}

void printLinkedList(nodePtr node){
  while(node != NULL){
    if (node->nextNode)
        printf("%d ", node->value);
    else
        printf("%d", node->value);
    node = node->nextNode;
  }
  printf("\n");

}

void freeLinkedList(nodePtr node){
  nodePtr tempNode = node;
  while(tempNode != NULL){
    node = node->nextNode;
    free(tempNode);
    tempNode = node;
  }
}
